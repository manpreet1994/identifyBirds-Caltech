# -*- coding: utf-8 -*-
"""identifyBirds.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IPCX7PXEBpEvohgueh4p6Fxe0zAIYx2-

What's your bird

Extract the zip of Caltech-UCSD Birds 200 data
"""

from pathlib import Path
import urllib.request
import tarfile

urlPath = 'http://www.vision.caltech.edu/visipedia-data/CUB-200/images.tgz'

url = urlPath
local_tgz_path = Path("./birdsData.tar.gz")
print("Downloading from %s..." % (url,))
urllib.request.urlretrieve(url, local_tgz_path)

"""Extract the tar and set path to current directory"""

print("Opening using tarfile from %s..." % (local_tgz_path,))
tarred_file = tarfile.open(local_tgz_path)
tarred_file.extractall(path="/content")
tarred_file.close()
print("Completed")

path = Path("/content")

"""Copy all the images to a newly created "train" folder"""

!mkdir train
!cp -r ./images/* ./train

# %reload_ext autoreload
# %autoreload 2
# %matplotlib inline

from fastai.vision import *
from fastai.metrics import error_rate

"""If you're using a computer with an unusually small GPU, you may get an out of memory error when running this notebook. If this happens, click Kernel->Restart, uncomment the 2nd line below to use a smaller *batch size*."""

bs = 32

# bs = 16   # uncomment this line if you run out of memory even after clicking Kernel->Restart

"""## Looking at the data

Load the data using data block api and set the pattern of labels from the file names as below
"""

patt=r"\.((?:.*))\/"

data = (ImageList.from_folder(path) #Where to find the data? -> in path and its subfolders
        .split_by_rand_pct()   
        .label_from_re(pat = patt, full_path=False)                  #How to split in train/valid? -> use the folders
        .transform(get_transforms(do_flip=False), size=64)        #Data augmentation? -> use tfms with a size of 64
        .databunch())

data

data.show_batch(1, figsize=(3,3), hide_axis=True)

print(data.classes)
len(data.classes),data.c

"""## Training: resnet34"""

learn = cnn_learner(data, models.resnet34, metrics=error_rate)

learn.model

learn.fit_one_cycle(4)

learn.save('stage-1')

"""Checking for completely new images, upload the images yourself from local drive and check with the model"""

!mkdir checklist

img = open_image('./checklist/2.jpg')
img
learn.predict(img)

interp = ClassificationInterpretation.from_learner(learn)

losses,idxs = interp.top_losses()

len(data.valid_ds)==len(losses)==len(idxs)

interp.plot_top_losses(9, figsize=(20,10))

interp.most_confused(min_val=4)

